from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated
from sqlalchemy.exc import SQLAlchemyError
from database.database import AsyncSessionLocal
from database.crud import (
    create_university_group, create_telegram_chat, get_telegram_chat_by_chat_id, get_university_group_by_id,
    cleanup_unused_university_groups, switch_telegram_chat_group, get_university_group_by_cist_id,
    add_private_subscriber, remove_private_subscriber, delete_telegram_chat
)
from services.schedule_api import ScheduleAPI
from services.schedule_sync import initial_sync_on_register, load_subjects_for_group
from bot.filters.admin_filter import IsGroupAdmin
from database.schedule_crud import (
    get_schedule_for_date,
    get_schedule_for_week,
    get_links_by_group,
    get_subjects_for_group
)
from datetime import date, timedelta
import re
import logging

logger = logging.getLogger(__name__)
api_client = ScheduleAPI()
router = Router()


def format_schedule_message(group_name: str, schedule: list, is_week: bool):
    if not schedule:
        return f"üì≠ –†–æ–∑–∫–ª–∞–¥ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π. –í—ñ–Ω –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó."

    day_names = {
        "Monday": "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "Tuesday": "–í—ñ–≤—Ç–æ—Ä–æ–∫", "Wednesday": "–°–µ—Ä–µ–¥–∞",
        "Thursday": "–ß–µ—Ç–≤–µ—Ä", "Friday": "–ü º—è—Ç–Ω–∏—Ü—è", "Saturday": "–°—É–±–æ—Ç–∞", "Sunday": "–ù–µ–¥—ñ–ª—è"
    }

    text = f"üìÖ <b>–†–æ–∑–∫–ª–∞–¥ –¥–ª—è {group_name}</b>\n\n"
    days = {}
    for cls in schedule:
        days.setdefault(cls.date, []).append(cls)

    for day, classes in sorted(days.items()):
        day_name = day_names.get(classes[0].day_of_week, classes[0].day_of_week)
        text += f"<b>{day_name}, {day.strftime('%d.%m')}</b>\n"
        for c in sorted(classes, key=lambda x: x.time_start):
            text += f"  ‚Ä¢ {c.time_start.strftime('%H:%M')} (–ö–∏—ó–≤) - {c.subject_name}"
            if c.class_type:
                text += f" ({c.class_type})"
            text += "\n"
        text += "\n"
    return text


@router.message(Command("register"))
async def cmd_register(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.answer(
            "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /register –ü–ó–ü–Ü-24-1"
        )
        return

    chat_id = int(message.chat.id)
    user_id = message.from_user.id
    username = message.from_user.username
    chat_title = message.chat.title or "–ù–µ–≤—ñ–¥–æ–º–∞ –≥—Ä—É–ø–∞"

    async with AsyncSessionLocal() as db:
        try:
            existing_chat = await get_telegram_chat_by_chat_id(db, chat_id)
            if existing_chat:
                uni_group = await get_university_group_by_id(db, existing_chat.university_group_id)
                await message.answer(
                    f"‚ÑπÔ∏è –ì—Ä—É–ø–∞ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: @{existing_chat.admin_username or '–∞–¥–º—ñ–Ω'}\n"
                    f"üìö –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏: {uni_group.name}\n"
                    f"üÜî CIST ID: {uni_group.cist_group_id}"
                )
                return

            waiting_msg = await message.answer("üîç –®—É–∫–∞—é –≥—Ä—É–ø—É –≤ —Å–∏—Å—Ç–µ–º—ñ –•–ù–£–†–ï...")

            command_args = message.text.split(maxsplit=1)
            group_name = None
            if len(command_args) > 1:
                group_name = command_args[1].strip()
            else:
                match = re.search(r'[–ê-–Ø–Ü–á–Ñ–∞-—è—ñ—ó—î]+-\d{2}-\d', chat_title)
                if match:
                    group_name = match.group(0)
                else:
                    group_name = chat_title

            cist_group_id = await api_client.find_cist_group_id(group_name)
            if not cist_group_id:
                await waiting_msg.edit_text(
                    f"‚ùå –ì—Ä—É–ø—É '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ CIST.\n\n"
                    f"üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.\n"
                    f"–ü—Ä–∏–∫–ª–∞–¥: –ü–ó–ü–Ü-24-1, –ö–ë–Ü–ö–°-23-2\n\n"
                    f"–ê–±–æ –∑–º—ñ–Ω—ñ—Ç—å –Ω–∞–∑–≤—É —á–∞—Ç—É –Ω–∞ –∫–æ–¥ –≥—Ä—É–ø–∏ —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
                )
                return

            university_group = await create_university_group(
                db=db,
                cist_group_id=int(cist_group_id),
                name=group_name
            )

            telegram_chat = await create_telegram_chat(
                db=db,
                chat_id=chat_id,
                university_group_id=university_group.id,
                admin_user_id=user_id,
                admin_username=username
            )

            await waiting_msg.edit_text(
                f"‚úÖ –ì—Ä—É–ø—É –∑–Ω–∞–π–¥–µ–Ω–æ!\n"
                f"üìö {group_name} (ID: {cist_group_id})\n\n"
                f"üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –ø—Ä–µ–¥–º–µ—Ç–∏..."
            )

            subjects_loaded = await load_subjects_for_group(university_group.id, int(cist_group_id))
            if not subjects_loaded:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –≥—Ä—É–ø–∏ {group_name}")

            await waiting_msg.edit_text("üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ä–æ–∑–∫–ª–∞–¥...")

            sync_success = await initial_sync_on_register(university_group.id)

            if sync_success:
                await waiting_msg.edit_text(
                    f"‚úÖ –ì—Ä—É–ø–∞ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: @{username or '–≤–∏'}\n"
                    f"üìö –ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏: {group_name}\n"
                    f"üÜî CIST ID: {cist_group_id}\n\n"
                    f"üìÖ –†–æ–∑–∫–ª–∞–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 7 –¥–Ω—ñ–≤\n\n"
                    f"‚ÑπÔ∏è –¢–µ–ø–µ—Ä –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ:\n"
                    f"‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–∞—Ä–∏ —á–µ—Ä–µ–∑ /add_links –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö –∑ –±–æ—Ç–æ–º\n"
                    f"‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∫–æ–º–∞–Ω–¥–∞–º–∏ /schedule_today —Ç–∞ /schedule_week\n\n"
                    f"üîî –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ:\n"
                    f"‚Ä¢ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —â–æ–¥–Ω—è –æ 7:45\n"
                    f"‚Ä¢ –ù–∞–¥—ñ—à–ª–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ—ó –ø–∞—Ä–∏\n"
                    f"‚Ä¢ –û–Ω–æ–≤–∏—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —â–æ–¥–Ω—è –æ 5:00\n\n"
                    f"‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±–æ—Ç–æ–º —É —Ü—ñ–π –≥—Ä—É–ø—ñ!"
                )
            else:
                await waiting_msg.edit_text(
                    f"‚ö†Ô∏è –ì—Ä—É–ø–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.\n\n"
                    f"üìö {group_name}\n"
                    f"üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: @{username or '–≤–∏'}\n\n"
                    f"–†–æ–∑–∫–ª–∞–¥ –±—É–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ 5:00 —Ä–∞–Ω–∫—É.\n"
                    f"–ê–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /sync_schedule –ø—ñ–∑–Ω—ñ—à–µ."
                )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {e}")


@router.message(Command("change_group"), IsGroupAdmin())
async def cmd_change_group(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    command_args = message.text.split(maxsplit=1)
    if len(command_args) < 2:
        await message.answer(
            "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤—É –≥—Ä—É–ø–∏.\n"
            "–ü—Ä–∏–∫–ª–∞–¥: /change_group –ü–ó–ü–Ü-24-1"
        )
        return

    new_group_name = command_args[1].strip()
    chat_id = int(message.chat.id)

    async with AsyncSessionLocal() as db:
        try:
            telegram_chat = await get_telegram_chat_by_chat_id(db, chat_id)
            if not telegram_chat:
                await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
                return

            old_university_group_id = telegram_chat.university_group_id

            waiting_msg = await message.answer(f"üîç –®—É–∫–∞—é –≥—Ä—É–ø—É '{new_group_name}' –≤ —Å–∏—Å—Ç–µ–º—ñ –•–ù–£–†–ï...")

            cist_group_id = await api_client.find_cist_group_id(new_group_name)
            if not cist_group_id:
                await waiting_msg.edit_text(
                    f"‚ùå –ì—Ä—É–ø—É '{new_group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—ñ CIST.\n\n"
                    f"üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–∞–∑–≤–∞ –≥—Ä—É–ø–∏ –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
                )
                return

            new_university_group = await get_university_group_by_cist_id(db, int(cist_group_id))

            if not new_university_group:
                new_university_group = await create_university_group(
                    db=db,
                    cist_group_id=int(cist_group_id),
                    name=new_group_name
                )
                await waiting_msg.delete()

                await load_subjects_for_group(new_university_group.id, int(cist_group_id))

                sync_success = await initial_sync_on_register(new_university_group.id)
            else:
                await waiting_msg.delete()
                sync_success = True

            await switch_telegram_chat_group(db, chat_id, new_university_group.id)

            await cleanup_unused_university_groups(db)

            if sync_success:
                await message.answer(
                    f"‚úÖ –ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≥—Ä—É–ø—É <b>{new_group_name}</b>!\n"
                    f"–†–æ–∑–∫–ª–∞–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ."
                )
            else:
                await message.answer(
                    f"‚ö†Ô∏è –ß–∞—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≥—Ä—É–ø—É <b>{new_group_name}</b>, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.\n"
                    "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≥—Ä—É–ø–∏: {e}", exc_info=True)
            await message.answer("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≥—Ä—É–ø–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@router.message(Command("schedule_today"))
async def cmd_schedule_today(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, int(message.chat.id))
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        university_group = await get_university_group_by_id(db, telegram_chat.university_group_id)
        today = date.today()
        schedule = await get_schedule_for_date(db, university_group.id, today)

        formatted_message = format_schedule_message(university_group.name, schedule, is_week=False)
        await message.answer(formatted_message, parse_mode="HTML")


@router.message(Command("schedule_week"))
async def cmd_schedule_week(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, int(message.chat.id))
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        university_group = await get_university_group_by_id(db, telegram_chat.university_group_id)
        today = date.today()
        week_end = today + timedelta(days=7)
        schedule = await get_schedule_for_week(db, university_group.id, today, week_end)

        formatted_message = format_schedule_message(university_group.name, schedule, is_week=True)
        await message.answer(formatted_message, parse_mode="HTML")


@router.message(Command("info"))
async def cmd_info(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    chat_id = int(message.chat.id)
    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, chat_id)
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        university_group = await get_university_group_by_id(db, telegram_chat.university_group_id)

        subjects_count = len(await get_subjects_for_group(db, university_group.id))
        links_count = len(await get_links_by_group(db, university_group.id))

        created_at = telegram_chat.created_at.strftime('%d.%m.%Y')

        await message.answer(
            f"‚ÑπÔ∏è <b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≥—Ä—É–ø—É</b>\n\n"
            f"üìö –ù–∞–∑–≤–∞: {university_group.name}\n"
            f"üÜî CIST ID: {university_group.cist_group_id}\n"
            f"üë®‚Äçüíº –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä: @{telegram_chat.admin_username or '–∞–¥–º—ñ–Ω'}\n"
            f"üìñ –ü—Ä–µ–¥–º–µ—Ç—ñ–≤ —É —Ä–æ–∑–∫–ª–∞–¥—ñ: {subjects_count}\n"
            f"üîó –î–æ–¥–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω—å: {links_count}\n"
            f"üìÖ –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞: {created_at}\n\n"
            f"‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º —É —Ü—ñ–π –≥—Ä—É–ø—ñ",
            parse_mode="HTML"
        )


@router.message(Command("sync_schedule"), IsGroupAdmin())
async def cmd_sync_schedule(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    chat_id = int(message.chat.id)
    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, chat_id)
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        university_group = await get_university_group_by_id(db, telegram_chat.university_group_id)

        waiting_msg = await message.answer("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É...")
        sync_success = await initial_sync_on_register(university_group.id)

        if sync_success:
            await waiting_msg.edit_text("‚úÖ –†–æ–∑–∫–ª–∞–¥ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await waiting_msg.edit_text(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥.\n"
                "CIST API –º–æ–∂–µ –±—É—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.\n"
                "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
            )


@router.message(Command("private_me"))
async def cmd_private_me(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    user = message.from_user
    chat_id = message.chat.id

    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, chat_id)
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        subscriber = await add_private_subscriber(
            db=db,
            user_id=user.id,
            chat_id=chat_id,
            username=user.username
        )

        if not subscriber:
            await message.reply(f"–¢–∏ (@{user.username}) –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π")
            return

        try:
            await message.bot.send_message(
                user.id,
                f"üîî –ü—Ä–∏–≤—ñ—Ç, {user.first_name or user.username}!\n"
                f"–¢–µ–ø–µ—Ä —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ –≥—Ä—É–ø–∏: {message.chat.title}"
            )
            await message.answer(f"‚úÖ –¢–µ–ø–µ—Ä—å —Ç—ã (@{user.username}) –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ª–∏—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        except Exception:
            await message.reply(
                "‚ö†Ô∏è –Ø –Ω–µ –º–æ–∂—É –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–æ–±—ñ –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫—Ä–∏–π –¥—ñ–∞–ª–æ–≥ –∑—ñ –º–Ω–æ—é —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ ‚ûú /start"
            )


@router.message(Command("stop_private"))
async def cmd_stop_private(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, message.chat_id)
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        removed = await remove_private_subscriber(
            db=db,
            user_id=message.from_user.id,
            chat_id=message.chat.id
        )
        if removed:
            await message.answer("üõë –¢–∏ –±—ñ–ª—å—à–µ –Ω–µ –æ—Ç—Ä–∏–º—É—î—à –æ—Å–æ–±–∏—Å—Ç—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
        else:
            await message.answer("‚ÑπÔ∏è –¢–∏ –Ω–µ –±—É–≤ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–π –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")


@router.message(Command("delete_chat"), IsGroupAdmin())
async def cmd_delete_chat(message: Message):
    if message.chat.type == "private":
        await message.answer("‚ùå –¶—è –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö")
        return

    async with AsyncSessionLocal() as db:
        telegram_chat = await get_telegram_chat_by_chat_id(db, message.chat.id)
        if not telegram_chat:
            await message.answer("‚ùå –ì—Ä—É–ø–∞ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /register")
            return

        try:
            await delete_telegram_chat(db, telegram_chat)
        except SQLAlchemyError as e:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –≥—Ä—É–ø–∞ –Ω–µ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞.")
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —á–∞—Ç–∞ {message.chat.id}: {e}")
        else:
            await message.answer(
                "‚úÖ –ì—Ä—É–ø–∞ –±—É–ª–∞ –≤–∏–¥–∞–ª–µ–Ω–∞. –á—ó –º–æ–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –∞–¥–º—ñ–Ω –∞–±–æ –±–æ—Ç –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –≥—Ä—É–ø–∏."
            )





@router.my_chat_member()
async def on_bot_added(event: ChatMemberUpdated):
    if event.new_chat_member.status in ["member", "administrator"]:
        await event.answer(
            "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥–æ–º –¥–ª—è –•–ù–£–†–ï.\n\n"
            "üìù –©–æ–± –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É:\n"
            "1Ô∏è‚É£ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –∑ –Ω–∞–∑–≤–æ—é –≥—Ä—É–ø–∏\n"
            "2Ô∏è‚É£ –¢–æ–π, —Ö—Ç–æ –≤–∏–∫–æ–Ω–∞—î —Ü—é –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä—à–∏–º, —Å—Ç–∞–Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–∏\n"
            "3Ô∏è‚É£ –¢—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–º–æ–∂–µ –∫–µ—Ä—É–≤–∞—Ç–∏ –±–æ—Ç–æ–º\n\n"
            "üí° –ü—ñ—Å–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è, –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ—ó —ñ —Ç. –¥. —á–µ—Ä–µ–∑ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–æ—Ç–æ–º."
        )