import asyncio
from logging.config import fileConfig

from sqlalchemy import engine_from_config
from sqlalchemy import pool
from sqlalchemy.ext.asyncio import create_async_engine

from alembic import context

# –≠—Ç–æ Alembic Config object, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ .ini —Ñ–∞–π–ª–µ
config = context.config

# –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º ini-—Ñ–∞–π–ª –¥–ª—è Python logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MetaData –≤–∞—à–∏—Ö –º–æ–¥–µ–ª–µ–π
# –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç Alembic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
import os
import sys
from pathlib import Path

from dotenv import load_dotenv
load_dotenv()

from os import getenv
DATABASE_URL = getenv("DATABASE_URL")

config.set_main_option("sqlalchemy.url", DATABASE_URL)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏
sys.path.append(str(Path(__file__).parent.parent))

from database.models import Base

target_metadata = Base.metadata


# –î—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ alembic.ini, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–ª—è env.py
# –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ alembic.ini
# –ù–∞–ø—Ä–∏–º–µ—Ä:
# from config.settings import DATABASE_URL
# config.set_main_option("sqlalchemy.url", DATABASE_URL)
# –¢–∞–∫ –∫–∞–∫ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä, —ç—Ç–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
# –≤ alembic.ini –∏–ª–∏ –∑–¥–µ—Å—å.

def run_migrations_offline() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ 'offline' —Ä–µ–∂–∏–º–µ."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º."""
    context.configure(connection=connection, target_metadata=target_metadata)
    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ 'online' —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫."""
    connectable = config.attributes.get("connection", None)
    if connectable is None:
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ alembic.ini
        url = config.get_main_option("sqlalchemy.url")
        connectable = create_async_engine(
            url,
            poolclass=pool.NullPool,
        )

    async def run_async_migrations():
        async with connectable.connect() as connection:
            await connection.run_sync(do_run_migrations)
        await connectable.dispose()

    # üîß –í–æ—Ç —Ç—É—Ç ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:
    asyncio.run(run_async_migrations())


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

